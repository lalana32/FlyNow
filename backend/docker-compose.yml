services:
  yarp:
    build: ./YarpProxy
    ports:
      - '5000:80' # localhost:5000 â†’ port 80 u kontejneru
    environment:
      ASPNETCORE_URLS: http://+:80
      ASPNETCORE_ENVIRONMENT: Production
    depends_on:
      - authservice
    networks:
      - backend

  auth.database:
    image: postgres:17-alpine
    container_name: auth.database
    networks:
      - backend
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - '5433:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 5s
      timeout: 5s
      retries: 10

  rabbitmq:
    image: rabbitmq:3-management-alpine
    hostname: rabbitmq
    networks:
      - backend
    restart: unless-stopped
    ports:
      - '5672:5672'
      - '15672:15672'
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
      RABBITMQ_DEFAULT_VHOST: /
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ['CMD', 'rabbitmq-diagnostics', 'check_port_connectivity']
      interval: 5s
      timeout: 10s
      retries: 10

  authservice:
    build:
      context: ./authservice/
    networks:
      - backend
    ports:
      - '5001:5001'
    environment:
      ASPNETCORE_URLS: http://+:5001
      ASPNETCORE_ENVIRONMENT: Development
      ConnectionStrings__DefaultConnection: >-
        Host=auth.database;Port=5432;Database=${POSTGRES_DB};
        Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};
        Pooling=true;Minimum Pool Size=5;
      RabbitMQ__Host: rabbitmq
      RabbitMQ__Port: 5672
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    depends_on:
      auth.database:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    command:
      [
        'sh',
        '-c',
        'wait-for-it.sh auth.database:5432 --timeout=60 -- dotnet AuthServiceApi.dll',
      ]
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:5001/health']
      interval: 10s
      timeout: 5s
      retries: 5

  emailservice:
    build:
      context: ./emailsenderservice/
    networks:
      - backend
    ports:
      - '5002:5002'
    environment:
      ASPNETCORE_URLS: http://+:5002
      ASPNETCORE_ENVIRONMENT: Development
      RabbitMQ__Host: rabbitmq
      RabbitMQ__Port: 5672
      RabbitMQ__Username: ${RABBITMQ_DEFAULT_USER}
      RabbitMQ__Password: ${RABBITMQ_DEFAULT_PASS}
      RabbitMQ__VirtualHost: /
    depends_on:
      rabbitmq:
        condition: service_healthy
    command:
      [
        'sh',
        '-c',
        'wait-for-it.sh rabbitmq:5672 --timeout=60 -- dotnet EmailServiceApi.dll',
      ]
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:5002/health']
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  rabbitmq_data:

networks:
  backend:
    driver: bridge
